
-------------------------------------------------------------------------
//######################################################
//Table Constructor
//ROW(), ADDCOLUMN(), SELECTCOLUMNS(), GENERATE()
//######################################################
-------------------------------------------------------------------------
-- Generate 1 row
EVALUATE
	{ 1 }
EVALUATE
	{ (1) }


-- Generate 2 rows
EVALUATE
	{
		{1}, {2}	
	}

-- Generate 3 rows
EVALUATE
	{ 1,2,3 }

-- Generate 4 columns and 2 rows
EVALUATE
	{
		(1,2,3, DATE(2021,1,1)),
		(4,5,6, DATE(2021,1,1))	
	}

-- Generate 4 columns and 2 rows
EVALUATE
VAR Table1 = 
	{
		(1,2,3, DATE(2021,1,1)),
		(4,5,6, DATE(2021,1,1))	
	}
RETURN Table1

----------------------------------------
EVALUATE
VAR Table1 = 
	{
		("A"),
		("B")	
	}
VAR Table1Name =
	SELECTCOLUMNS(
					Table1,
					"ColumnName1", [Value]
				) -- rename the column using SELECTCOLUMNS				
VAR Table2 = 
	{
		("C"),
		("D")
	}
VAR Table2Name =
	SELECTCOLUMNS(
					Table2,
					"ColumnName2", [Value]
				)
RETURN 	
	GENERATE(Table1Name, Table2Name) -- Crossjoin?

----------------------------------------

--  GENERATE is an iterator: the second argument is evaluated in a row context
DEFINE
VAR Dates =
    UNION (
        ROW ( "FirstDate", DATE ( 2007, 1, 1 ), "LastDate", DATE ( 2007, 1, 3 ) ),
        ROW ( "FirstDate", DATE ( 2007, 1, 9 ), "LastDate", DATE ( 2007, 1, 12 ) )
    )
VAR DatesExpanded =
    GENERATE (
        Dates,
        DATESBETWEEN ( 'Calendar'[Date], [FirstDate], [LastDate] )
    )
 
EVALUATE Dates
 
EVALUATE DatesExpanded


----------------------------------------
EVALUATE
VAR Table1 = 
	{
		("A","B"),
		("C","D")	
	}
VAR Table1Name =
	SELECTCOLUMNS(
					Table1,
					"ColumnName1", [Value1],
					"ColumnName2", [Value2]
				)
VAR Table2 = 
	{
		("E","F"),
		("G","H")	
	}
VAR Table2Name =
	SELECTCOLUMNS(
					Table2,
					"ColumnName3", [Value1],
					"ColumnName4", [Value2]
				)
				
//RETURN 	Table2Name
RETURN
	GENERATE(Table1Name, Table2Name) -- crossjoin


-----------------------------------------
-- Rename column Value to ColumnName1
EVALUATE
VAR Table1 = 
	{
		("A"),
		("B")	
	}
VAR Table1Name =
	SELECTCOLUMNS(
					Table1,
					"ColumnName1", [Value]
				)
RETURN
	Table1Name

-------------------------------------------
-- Generate 2 rows
EVALUATE
{
("Spain", 100), ("Sweden", )
}


-------------------------------------------
EVALUATE
VAR Table1 = 
	{
		(1,2,3, DATE(2021,1,1)),
		(4,5,6, DATE(2021,1,1))	
	}
VAR Table2 =
	SELECTCOLUMNS(
					Table1,
					"ColumnName1", [Value1],
					"ColumnName2", [Value2],
					"ColumnName3", [Value3],
					"ColumnName4", [Value4]
				)
RETURN 	Table2

------------------------------------------
-- Rename the column [Date] to MyDate
EVALUATE
	SELECTCOLUMNS(
					CALENDARAUTO(),
					"MyDate", [Date]
					)


//GENERATE function is the equivalent of crossjoin
EVALUATE
	LkpAccount
	
EVALUATE
	LkpExpense

EVALUATE
VAR BaseTable = GENERATE(LkpAccount, LkpExpense) --> CrossJoin
RETURN BaseTable
--

//Row function always return 1 row
EVALUATE
VAR	Table1 = ROW(
					"Column1", "A",
					"Column2", "B"
				)
VAR	Table2 = ROW(

					"Column3", "C",
					"Column4", "D"
				)
//RETURN Table2
RETURN 	
	GENERATE(Table1, Table2)




--
EVALUATE
	VAR T1=VALUES('Calendar'[CalendarYearMonth])
	VAR T2=ADDCOLUMNS(T1, "Expenses", [MsrAmount])
RETURN
	T2

--
EVALUATE
	VAR T1=VALUES('Calendar'[CalendarYearMonth])
	VAR T2=ADDCOLUMNS(T1, "Expenses", [MsrAmount])
RETURN
	CALCULATETABLE(
	T2
	)
	

-- SELECT COLUMNS
EVALUATE
	SELECTCOLUMNS(
					Account,
					"MyAccountId",
					Account[AccountId]
					)


EVALUATE
	SELECTCOLUMNS(
				TOPN(10, Expenses),
				"Expense Cost", Expenses[AmountCAD]
				)



-- ADDCOLUMNS
EVALUATE
ADDCOLUMNS (
	Account,
	"AccountId2", Account[AccountId]	
)	
	



----------------------------------------------
//##########################################
//VALUE
//##########################################
----------------------------------------------
EVALUATE
{
(VALUE("1 PM"))
}


//--------------------------------------------
//############################################
//EXCEPT
//############################################
//--------------------------------------------
EVALUATE
VAR Days = VALUES(Calendar[EnglishDayNameOfWeek])
VAR WeekendDays = {"Saturday", "Sunday"}
VAR WorkingDays = EXCEPT(Days, WeekendDays)
RETURN 
	WorkingDays
-------------------------------

EVALUATE
	ExpenseClassification

-------------------------------
EVALUATE
VAR  MyExpenses = VALUES(Expenses[ExpenseCode])
VAR  ExpCode = VALUES(LkpExpense[ExpenseCode])
VAR  NotExistExpenseCode = EXCEPT(MyExpenses, ExpCode)
RETURN
	NotExistExpenseCode
-------------------------------
EVALUATE
VAR MyExpenses = VALUES(Expenses)
RETURN MyExpenses

---------------------------------------------------------------
//#####################################################
//COUNTROWS
//COUNT
//COUNTX
//COUNTBLANK
//COUNTAX
//COUNTA
//DISTINCTCOUNT
//DISTINCTCOUNTNONBLANK
//######################################################
-----------------------------------------------------------------
EVALUATE
{
(COUNTROWS(Expenses))
}

EVALUATE
{
(COUNT(Expenses[ExpenseCode]))
}

EVALUATE
{
(COUNTX(Expenses, EXpenses[ExpenseCode]))
}

EVALUATE
{
(DISTINCTCOUNT(Expenses[ExpenseCode]))
}

EVALUATE
{
(DISTINCTCOUNTNOBLANK(Expenses[ExpenseCode]))
}


----------------------
MEASURE _Measures[Total Food Cost] = 
	SUM(_Measures[MsrAmount],
			FILTER(
						Expenses,
						Expenses[ExpenseCode]= "FBV"
					)	
		)
-----------------------		

DEFINE 
	MEASURE _Measures[Total Food Count] = 
	COUNTROWS(
				FILTER(
						Expenses,
						Expenses[ExpenseCode]= "FBV"
					)
			)
	MEASURE _Measures[Total ALL Cost] =		
		SUMX(Expenses, Expenses[AmountCAD])
		
	MEASURE _Measures[Total Food Cost] =
	 	CALCULATE
	 		(
				SUM(Expenses[AmountCAD]),
				FILTER(Expenses, Expenses[ExpenseCode] = "FBV")
			)
EVALUATE			
	{[Total ALL Cost]}





---------------------------------------------------------------------------------------------------
DEFINE
    VAR MinimumAmount = 2000000
    VAR MaximumAmount = 8000000
EVALUATE
FILTER (
    ADDCOLUMNS (
        SUMMARIZE ( Sales, 'Product'[Category] ),
        "CategoryAmount", [Sales Amount]
    ),
    AND (
        [CategoryAmount] >= MinimumAmount,
        [CategoryAmount] <= MaximumAmount
    )
)
ORDER BY [CategoryAmount]


//Something much more interesting is to extract a new table that you build using a DAX Query – 
//a table that doesn’t actually exist in your data model but can be fabricated via a query and then materialised into a spreadsheet or CSV.  
//There are a number of regular DAX functions that return Tables including FILTER, VALUES, CALCULATETABLE, DATEADD to name a few.

EVALUATE
	ExpenseClassification
	
//--------------------------------------
EVALUATE
	VALUES(ExpenseClassification[ExpenseCategory])
	
EVALUATE
	CALCULATETABLE
		(
			VALUES(ExpenseClassification[ExpenseCategory])
		)
--
EVALUATE
	CALCULATETABLE
		(
			VALUES(ExpenseClassification[ExpenseCategory]),
			NOT ISBLANK(ExpenseClassification[ExpenseCategory])
		)
--
	
//--------------------------------------
EVALUATE
	FILTER(Expenses, MeasuresCollection[Amount]>=1000)
//--------------------------------------


//In addition to these regular DAX functions, there are some functions specifically designed to be used in DAX Queries, such as SUMMARIZE and ADDCOLUMNS.  
//For those of you that know some SQL, SUMMARIZE is similar to GROUP BY (note it is similar, but not the same).
//In the example below, I am summarising the Calendar table and extracting a table that contains all the Year/Month combinations.

EVALUATE
	SUMMARIZE(
			Calendar,
			Calendar[CalendarYearDesc],
			Calendar[EnglishMonthName]
			)
//ORDER BY 			
//		Calendar[CalendarYearDesc],
//		Calendar[EnglishMonthName]

//---------------------------------------

//Now using the ADDCOLUMNS DAX function, it is possible to create a summary table leveraging the measures in your data model too.  
//Below is a table showing the summary sales by month (I added a ROUND function too).

EVALUATE
	ADDCOLUMNS(
	SUMMARIZE(
			Calendar,
			Calendar[CalendarYearDesc],
			Calendar[EnglishMonthName]
			),
		"Total Sales", ROUND([Amount],2)
		)
//ORDER BY 			
//		Calendar[CalendarYearDesc],
//		Calendar[EnglishMonthName]
	

//As I mentioned earlier, the result of a DAX Query MUST be a table – no exceptions.  
//So what if you want to return a measure?  Well it is quite simple – you use the ROW function to return a single row table as shown below.
//The ROW function takes 2 parameters, the name of the column and the expression to be evaluated.  
//It then returns a single row table  with one or more columns (1 column in my case) and then returns the result.

EVALUATE
	ROW("Amount", [Amount])
	
//When you click the Server Timings button in DAX Studio (shown as 1 below), you will see a new tab (2) that among other things shows you 
//the total time spent in evaluating your query.  
//It is important that you clear the cache (4 below) before you test a query (unless you are trying to test what impact the cache has on your query).	
	
//In short, the storage engine is the fast, multi-threaded, cacheable engine.  The formula engine is very powerful, but is single threaded and not cacheable.  
//Where ever possible, you want your DAX formulas to use the storage engine in preference over the formula engine. 

//----------------------------------------------------------
--------- ########## ------------
//----------------------------------------------------------

EVALUATE --> Return a table/Requires a table expression.
Measures --> a scalar value, hence, must use {} to be put into a table.

EVALUATE
{
	[Sales Amount], [Margin], [Margin %] --> The column must be a measure, not existing numeric column, otherwise must use aggregation function.
} --> This will result in 3 rows


EVALUATE
{
	([Sales Amount], [Margin], [Margin %])
} --> This will result in 1 row


EVALUATE
{
	([Sales Amount], [Margin], [Margin %]),
	([Sales Amount] *2 , [Margin], [Margin %])
} --> This will result in 2 rows with same number of columns

EVALUATE
ROW (
	"Sales", [Sales Amount],
	"Margin", [Margin]
) -- add column names using ROW() function

---------------------------------
EVALUATE
	Query1
	
------------------
EVALUATE
	SUMMARIZECOLUMNS(Query1[Region], Query1[MemberBranch])

EVALUATE
	SUMMARIZECOLUMNS(
		'Date'[Calendar Year],
		"Amount", [Sales Amount]
	)
------------------------------------

//Date Table
Date =
ADDCOLUMNS (
	CALENDARAUTO(),
	"Year", YEAR ([Date]),
	"Month", FORMAT([Date], "mmmm"),
	"Month Number", MONTH([Date]),
	"Quarter", FORMAT( [Date], "\QQ")
)


------------------
//1 Date Table
EVALUATE
VAR Days = CALENDAR(DATE(2016,1,1), DATE(2018,12,31))
RETURN ADDCOLUMNS (
Days,
"Year", YEAR([Date]),
"Month Number", MONTH([Date]),
"Month", FORMAT([Date], "mmmm"),
"Year Month Number", YEAR([Date]) * 12 + MONTH([Date]) - 1,
"Year Month", FORMAT([Date],"mmm yy")
)

//2 better to compute only once and call it again multiple times

EVALUATE
ADDCOLUMNS(
	ADDCOLUMNS(
		CALENDAR(DATE(2016,1,1), DATE(2018,12,31)),
		"Year", YEAR([Date]),
		"Month Number", MONTH([Date]),
		"Month", FORMAT([Date], "mmmm"),
		"Year Month", FORMAT([Date],"mmm yy")
		),
	"Year Month Number", [Year] * 12 + [Month Number] - 1
)

//3 to add the name of the table for [Date]
EVALUATE
ADDCOLUMNS(
	ADDCOLUMNS(
			SELECTCOLUMNS(
					CALENDAR(DATE(2016,1,1), DATE(2018,12,31)),
					"Calendar[Date]", [Date]
					),
					"Year", YEAR(Calendar[Date]),
					"Month Number", MONTH(Calendar[Date]),
		"Month", FORMAT(Calendar[Date], "mmmm"),
		"Year Month", FORMAT(Calendar[Date],"mmm yy")
		),
	"Year Month Number", [Year] * 12 + [Month Number] - 1
)

//4 use variables, the code is more verbose, longer.
EVALUATE
VAR	BaseCalendar =
		CALENDAR(DATE(2016,1,1), DATE(2018,12,31))
VAR	RenamedCalendar = 
		SELECTCOLUMNS (BaseCalendar, "Calendar[Date]", [Date])
VAR	Calendar_1 = 
		SELECTCOLUMNS (
			RenamedCalendar,
			"Date", 'Calendar'[Date],
			"Year", YEAR(Calendar[Date]),
			"Month Number", MONTH(Calendar[Date]),
			"Month", FORMAT(Calendar[Date], "mmmm"),
			"Year Month", FORMAT(Calendar[Date], "mmm yy")
		)
VAR	Calendar_2 =
		ADDCOLUMNS (Calendar_1, "Year Month Number", [Year] * 12 + [Month Number] -1)
RETURN	
	Calendar_2

//5 GENERATE function
EVALUATE
VAR BaseCalendar = 
	CALENDAR( DATE(2016,1,1), DATE(2018,12,31) )
RETURN
	GENERATE(
		BaseCalendar,
		VAR	BaseDate = [Date]
		VAR	YearDate = YEAR(BaseDate)
		VAR	MonthNumber = MONTH(BaseDate)
		VAR	MonthName = FORMAT(BaseDate, "mmmm")
		VAR	YearMonthName = FORMAT(BaseDate, "mmm yy")
		VAR	YearMonthNumber = YearDate * 12 + MonthNumber - 1
		RETURN ROW (
			"Day", BaseDate,
			"Year", YearDate,
			"Month Number", MonthNumber,
			"Month", MonthName,
			"Year Month Number", YearMonthNumber,
			"Year Month", YearMonthName
			)
		)

// GENERATE function, here we only use variables for the sub-expression that need to be used multiple times
// the code is a bit shorter, better.
// readability of code will be much improved.
// maintainability will have a great benefit.
// writing DAX the right way, format the code and write the code as readable as it could.
EVALUATE
VAR BaseCalendar = 
	CALENDAR( DATE(2016,1,1), DATE(2018,12,31) )
RETURN
	GENERATE(
		BaseCalendar,
		VAR	BaseDate = [Date],
		VAR	YearDate = YEAR(BaseDate)
		VAR	MonthNumber = MONTH(BaseDate)		
		VAR	YearMonthNumber = YearDate * 12 + MonthNumber - 1
		RETURN ROW (
			"Day", BaseDate,
			"Year", YearDate,
			"Month Number", MonthNumber,
			"Month", FORMAT(BaseDate, "mmmm"),
			"Year Month Number", YearMonthNumber,
			"Year Month", FORMAT(BaseDate, "mmm yy")
			)
		)

------------------------------------
// START QUERY BUILDER
DEFINE
MEASURE Customer[Margin] = SUMX(Sales, Sales[Quantity] * (Sales[Net Price] - Sales[Unit])
EVALUATE
	SUMMARIZECOLUMNS(
		'Date'[Calendar Year],
		'Product'[Brand],
		Customer[Name],
		KEEPFILTERS(FILTER(ALL('Product'[Brand], SEARCH("Contoso", 'Product'[Brand], 1,0)=1)),
		"Sales Amount", [Sales Amount],
		"Margin", [Margin]
		)
/* END QUERY BUILDER */ 

-----------------------------------
//IF ( ISBLANK ( SUM ( Expenses[AmountCAD] ) ), 0, SUM ( Expenses[AmountCAD] ) )

EVALUATE
SUMMARIZE(Account, Account[AccountId], Account[AccountDescription]) -- 64,65,76


EVALUATE
{
CALCULATE (
	SUM(Expenses[AmountCAD]), 
	FILTER(Calendar,'Calendar'[IsThisPCBillingCycle]="Yes"),
	FILTER(Institution, Institution[InstitutionName]= "PC Financial")
	)
}

EVALUATE
{
CALCULATE (
	SUM(Expenses[AmountCAD]), 
	FILTER(Calendar,'Calendar'[IsPreviousPCBillingCycle]="Yes"),
	FILTER(Institution, Institution[InstitutionName]= "PC Financial")
	)
}


--------------------------------------------------------------------------------
//###########################################################
-- MIN, MINA, MINX
//###########################################################
---------------------------------------------------------------------------------
DEFINE
	MEASURE Expenses[MIN Amount1] = MIN(Expenses[AmountCAD])
	MEASURE Expenses[MIN Amount2] = MINX(Expenses, Expenses[AmountCAD])
	MEASURE Expenses

//----------------------------------------------------------------------------
//###########################################################################
//DATATABLE
//M code can't compute dynamic such as maximum value by scanning some tables
//###########################################################################
//----------------------------------------------------------------------------

-- Use Row function
EVALUATE	
	ROW("Price range", "LOW", "Min Price", 0, "Max Price", 100)


EVALUATE	
	UNION 
	(
	ROW("Price range", "LOW", "Min Price", 0, "Max Price", 100),
	ROW("Price range", "MEDIUM", "Min Price", 100, "Max Price", 1000)
	)

EVALUATE	
	UNION
		(
		ROW("Price range", "LOW", "Min Price", 0, "Max Price", 100),
		ROW("Price range", "MEDIUM", "Min Price", 100, "Max Price", 1000),
		ROW("Price range", "HIGH", "Min Price", 1000, "Max Price", 99999)
		)
	
-- The content of your DataTable cannot be computed
-- static value ok but can not write expressions
-- useful because it provides the entire code in Power BI window without having to revert to Power Query
EVALUATE
DATATABLE(
		"Country", STRING,
		"Number", INTEGER,
		{{"Spain", 100}, {"Sweden", 200}}
		)
		

EVALUATE
	DATATABLE(
			"Price Range", STRING,
			"Min Price", CURRENCY,
			"Max Price", CURRENCY,
			{
				{"LOW", 0, 100},
				{"MEDIUM", 100, 1000},
				{"HIGH", 1000, 99999}
			}
		)
	
-- Another way using anonymous table constructor
-- This below creates 3 different rows
EVALUATE
	{
		"LOW", 0 , 100	
	}

-- This creates 1 row
EVALUATE
	{
		("LOW", 0 , 100)
	}
	
-- This creates 3 row
EVALUATE
	{
		("LOW", 0 , 100),
		("Medium", 100 , 1000),
		("High", 1000 , 9999)
	}
	
EVALUATE
	SELECTCOLUMNS (
			{
				("LOW", 0 , 100),
				("Medium", 100 , 1000),
				("High", 1000 , 9999)
			},
			"Price Range", [Value1],
			"Min Price", [Value2],
			"Max Price", [Value3]
			)
//CONCLUSION
// Anonymous constructors curly brackets can't specify column names nor the data type
// DataTable does both but limitation can't use expressions, must use constant values inside DATATABLE
// Row works fine can specify column names but cannot specify data types and only 1 row at a time.


--------------------------------------------------------
//#####################################################
//SUMMARIZE, SUMMARIZECOLUMNS, FILTER
//#####################################################
-------------------------------------------------------- 

-- this not work, must use aggregation function
EVALUATE
	SUMMARIZECOLUMNS(Expenses[ExpenseCategory], "Amt", [AmountCAD])

-- this works
EVALUATE
	SUMMARIZECOLUMNS(Expenses[ExpenseCategory], "Amt", SUM(Expenses[AmountCAD]), "MinExpenseDate", MIN(Expenses[ExpenseDate]))

-- with filter
EVALUATE 
	SUMMARIZECOLUMNS(Expenses[ExpenseCategory], FILTER(Expenses, Expenses[ExpenseCategory]<>BLANK()) , "Amt", SUM(Expenses[AmountCAD]), "MinExpenseDate", MIN(Expenses[ExpenseDate]))
	
-- with filter
EVALUATE 
	SUMMARIZECOLUMNS(Expenses[ExpenseCategory], FILTER(Expenses, ISBLANK(Expenses[ExpenseCategory])) , "Amt", SUM(Expenses[AmountCAD]), "MinExpenseDate", MIN(Expenses[ExpenseDate]))
	
--
EVALUATE 
	SUMMARIZECOLUMNS(Expenses[ExpenseCategory], FILTER(Expenses, Expenses[ExpenseCategory]="Food Groceries") , "Amt", SUM(Expenses[AmountCAD]), "MinExpenseDate", MIN(Expenses[ExpenseDate]))


EVALUATE
CALCULATETABLE(
				SUMMARIZE(
						Expenses, 
						Expenses[ExpenseCategory], 
						Expenses[ExpenseCode]
						),
				Expenses[ExpenseCategory]<>BLANK()
			)

EVALUATE
SUMMARIZE(Expenses, Expenses[ExpenseCategory])

EVALUATE
SUMMARIZE(Expenses, Expenses[ExpenseCode])


EVALUATE
SUMMARIZE(Expenses, Expenses[ExpenseCategory], Expenses[ExpenseCode])


EVALUATE
SUMMARIZE(Expenses, Expenses[ExpenseCategory],Expenses[ExpenseSubCategory],Expenses[ExpenseSubCategoryDetail], "Total Expenses", [MsrAmount])

EVALUATE
SUMMARIZE('Calendar', 'Calendar'[CalendarYearMonth], "Total Expenses", [MsrAmount])

EVALUATE
CALCULATETABLE(
		SUMMARIZE('Calendar', 'Calendar'[CalendarYearMonth]),
		Expenses[ExpenseCategory]<>BLANK()
		)


-----
EVALUATE
SUMMARIZECOLUMNS(
		Expenses[ExpenseCategory], 
		FILTER(Expenses, Expenses[ExpenseCode]="UTB") , 
		"Amt", SUM(Expenses[AmountCAD]), 
		"MinExpenseDate", MIN(Expenses[ExpenseDate]),
		"MaxExpenseDate", MAX(Expenses[ExpenseDate])		
		)
--

DEFINE
	MEASURE Expenses[MyAmount] =	
			CALCULATE(
				SUM(Expenses[AmountCAD]), -- must use aggregation because AmountCAD is calculated column
				FILTER(Expenses,Expenses[ExpenseCode] = "UTB")
				)
EVALUATE
	{ Expenses[MyAmount] }
--
DEFINE
	MEASURE Expenses[MyAmount] =	
			CALCULATE(
				SUM(Expenses[AmountCAD]),
				FILTER(Expenses,Expenses[ExpenseCode] = "UTB")
				)
EVALUATE
	SUMMARIZECOLUMNS(
		Expenses[ExpenseCode],
		"UTB Amount", Expenses[MyAmount]	
	)

--
DEFINE
	MEASURE Expenses[MyAmount] =	
			CALCULATE(
				SUM(Expenses[AmountCAD]),
				Expenses,Expenses[ExpenseCode] = "UTB"
				)
EVALUATE -- this will only generate 1 row belonging to UTB
	SUMMARIZECOLUMNS(
		Expenses[ExpenseCode],
		"UTB Amount", [MyAmount]	
			)
--


-- this will not work because CALCULATE by itself needs table expression
EVALUATE
	CALCULATE(
				[MsrAmount],
				Expenses[ExpenseCode] = "UTB"
			)


-- this will return all rows of ExpenseCode with amount from UTB
DEFINE
	MEASURE Expenses[UTBAmount] =
		CALCULATE(
					[MsrAmount],
					Expenses[ExpenseCode] = "UTB"
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmount]
				)
				

-- use KEEPFILTERS to show other ExpenseCode as blanks except for UTB
DEFINE
	MEASURE Expenses[UTBAmount2021] =
		CALCULATE(
					[MsrAmount],
					KEEPFILTERS(Expenses[ExpenseCode] = "UTB" && YEAR(Expenses[ExpenseDate]) = 2021)
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmount2021]
				)

-- use KEEPFILTERS to show other ExpenseCode as blanks except for UTB
DEFINE
	MEASURE Expenses[UTBAmount2021] =
		CALCULATE(
					[MsrAmount],
					KEEPFILTERS(Expenses[ExpenseCode] = "UTB" && YEAR(Expenses[ExpenseDate]) = 2021)
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmount2021]
				)
				

-- If attempting to limit on 2021 by using additional table, this will NOT work
DEFINE
	MEASURE Expenses[UTBAmount2021] =
		CALCULATE(
					[MsrAmount],
					Expenses[ExpenseCode] = "UTB" && Calendar[CalendarYear] = 2021
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmount2021]
				)

-- If attempting to limit on 2021 by using same table then this will work
-- this will show same amount belonging to UTB 2021 for all ExpenseCode
DEFINE
	MEASURE Expenses[UTBAmount2021] =
		CALCULATE(
					[MsrAmount],
					Expenses[ExpenseCode] = "UTB" && YEAR(Expenses[ExpenseDate]) = 2021
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmount2021]
				)



-- Alternatively, using FILTER, this will show all ExpenseCode = 0 but UTB
DEFINE
	MEASURE Expenses[UTBAmountFilter2021] =
		CALCULATE(
					[MsrAmount],
					FILTER(
							Expenses,
							Expenses[ExpenseCode] = "UTB" && YEAR(Expenses[ExpenseDate]) = 2021
							)
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmountFilter2021]
				)




-- Alternatively, using FILTER, 
-- this will show all ExpenseCode with same values from UTB 2021
DEFINE
	MEASURE Expenses[UTBAmountFilter2021] =
		CALCULATE(
					[MsrAmount],
					FILTER(
							ALL(Expenses),
							Expenses[ExpenseCode] = "UTB" && YEAR(Expenses[ExpenseDate]) = 2021
						)
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmountFilter2021]
				)

-- this will be a better practise
DEFINE
	MEASURE Expenses[UTBAmountFilter2021] =
		CALCULATE(
					[MsrAmount],
					FILTER(
							ALL(Expenses[ExpenseCode], Expenses[ExpenseDate]),
							Expenses[ExpenseCode] = "UTB" && YEAR(Expenses[ExpenseDate]) = 2021
						)
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmountFilter2021]
				)

-- using FILTER for multiple tables
-- Alternatively, using FILTER, this will show all ExpenseCode = 0 but UTB
DEFINE
	MEASURE Expenses[UTBAmountFilter2021] =
		CALCULATE(
					[MsrAmount],
					FILTER(
							Expenses,
							Expenses[ExpenseCode] = "UTB"
							),
					FILTER(
							'Calendar',
							Calendar[CalendarYear] = 2021
										
						)
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmountFilter2021]
				)

-- using FILTER for multiple tables
-- Alternatively, using FILTER, this will show all ExpenseCode = 0 but UTB
DEFINE
	MEASURE Expenses[UTBAmountFilter2021] =
		CALCULATE(
					[MsrAmount],
					FILTER(
							ALL(Expenses),
							Expenses[ExpenseCode] = "UTB"
							),
					FILTER(
							'Calendar',
							Calendar[CalendarYear] = 2021
										
						)
				)
EVALUATE
	SUMMARIZECOLUMNS(
				Expenses[ExpenseCode],
				"MyUTB", [UTBAmountFilter2021]
				)
-- see using CROSSJOINS and KEEPFILTER


EVALUATE
DEFINE
	CALCULATE
		(
			[MsrAmount],
			Expenses[ExpenseCode] = "FBV"
		)


--CALCULATETABLE
--ALL, ALLEXCEPT, ALLNOBLANKROW


EVALUATE
CALCULATETABLE
	(
		Individual
	)
--
EVALUATE
CALCULATETABLE
	(
		Individual,
		Individual[IndividualId] =1
	)
---------------------------------------------------
EVALUATE
CALCULATETABLE
	(
		Account
	)
--
EVALUATE
CALCULATETABLE
	(
		ALL(Account)
	)

	
-----------------------------------------------------
EVALUATE
CALCULATETABLE
	(
		Account,
		Account[AccountTypeCode] = "CHCK"
	)

EVALUATE
CALCULATETABLE
	(
		Account,
		FILTER(
				Account,
				Account[AccountTypeCode] = "CHCK"
				)
	)

------------------------------------------------------
EVALUATE
CALCULATETABLE
	(
		Account,
		ALLEXCEPT(Account, Account[AccountTypeCode])
	)

EVALUATE
CALCULATETABLE
	(
		Account,
		Account[AccountTypeCode] = "CHCK",
		ALLEXCEPT(Account, Account[AccountTypeCode])
	)


EVALUATE
CALCULATETABLE
	(
		ALLEXCEPT(Account, Account[AccountTypeCode])
	)


//-----------------------------------------------
// TOPN
// TOPN retrieves the top N items from a table after sorting
// them by the result of the third argument.
// Multiple sorting criteria can be provided in further parameters.
//-----------------------------------------------
EVALUATE
	TOPN(
		3,
		Expenses,
		Expenses[AmountCAD],
		//Expenses[AmountCAD],
		DESC
	)
--
EVALUATE
	TOPN(
		3,
		CALCULATETABLE
			(				
				Expenses			
			),
		Expenses[AmountCAD],		
		DESC
	)
--
EVALUATE
	TOPN(
		3,
		CALCULATETABLE
			(				
				Expenses
			),
		Expenses[AmountCAD],
		DESC
	)
ORDER BY [AmountCAD] DESC
--


EVALUATE
	TOPN(
		20,
		CALCULATETABLE
			(				
				ALLEXCEPT(	Expenses, 
							Expenses[Currency1], 
							Expenses[Amount1], 
							Expenses[Currency2], 
							Expenses[Amount2], 
							Expenses[PaymentSource], 
							Expenses[ExpenseNote], 
							Expenses[ForeignCurrency],
							Expenses[CADExchangeRate]
							)
			),
		Expenses[AmountCAD],
		DESC
	)
ORDER BY [AmountCAD] DESC




----------------------------------------------------------
//########################################################
-- DATESBETWEEN, DATESINPERIOD
//########################################################
----------------------------------------------------------
EVALUATE
CALCULATETABLE('Calendar','Calendar'[CalendarYear]=2021)

EVALUATE
CALCULATETABLE('Calendar',DATESBETWEEN('Calendar'[Date],"2021-01-01", "2021-01-31"))

EVALUATE
VAR StartDate = DATE(2021,12,01)
VAR EndDate = DATE(2021,12,31)
RETURN
	DATESBETWEEN('Calendar'[Date], StartDate, EndDate)
		
EVALUATE
VAR StartDate = DATE(2021,12,01)
VAR EndDate = DATE(2021,12,31)
RETURN
	DATESINPERIOD('Calendar'[Date], EndDate, -5, DAY)
		
EVALUATE
CALCULATETABLE(
		SUMMARIZE('Calendar', 'Calendar'[CalendarYearMonth], "Total Expenses", [MsrAmount]),
		DATESINPERIOD('Calendar'[Date], LASTDATE('Calendar'[Date]),-3, MONTH)
		)
-- 
2022-10	0
2022-11	0
2022-12	0


-- MsrTotalAmount3M
EVALUATE
{
CALCULATE(
			SUMX(
					SUMMARIZE(
								'Calendar', 
								'Calendar'[CalendarYearMonth]), 
					[MsrAmount]
				),
					
				DATESINPERIOD('Calendar'[Date], 
								LASTDATE('Calendar'[Date]),
								-3, 
								MONTH
							)
		)			
		
}

//----------------------------------------------------------
//##################################################
//AVERAGE, AVERAGEX
//##################################################
//----------------------------------------------------------
AVERAGE --> Single column, no calculation, considers blanks
AVERAGEX --> calculation expressions, ignores blanks, considers 0

EVALUATE
	VAR ValsWithBlank = {1,2,3, BLANK()}
	VAR ValsWithZero = {1,2,3,0}
RETURN
	{
		("Average with BLANK", AVERAGEX(ValsWithBlank, [Value])),
		("Average with Zero", AVERAGEX(ValsWithZero, [Value])),

	}

--
-- MsrAverageCalendarYearMonth
EVALUATE
{
AVERAGEX(
			VALUES('Calendar'[CalendarYearMonth]),
			[MsrAmount]
			)
}


EVALUATE
	VAR T1=VALUES('Calendar'[CalendarYearMonth])
RETURN
{
	AVERAGEX(
			T1,
			[MsrAmount]
			)
}
-------------------------------
EVALUATE
	{ 
		AVERAGEX(VALUES('Calendar'[CalendarYearMonth]), [MsrAmount])
	}
	


-------------------------------------------------------
//#####################################################
// ROLLING AVERAGEX
//#####################################################
-------------------------------------------------------
-- MsrAverageRollingLast12M
EVALUATE
{
CALCULATE(
			AVERAGEX(
					SUMMARIZE(
								'Calendar', 
								'Calendar'[CalendarYearMonth]), 
								[MsrAmount]),
					
					DATESINPERIOD('Calendar'[Date], 
									LASTDATE('Calendar'[Date]),
									-12, 
									MONTH
								)
		)
}

---------------------------------
-- MsrAverageRollingLast12MV2
EVALUATE
VAR NumOfMonths = 12
VAR LastSelectedDate = MAX('Calendar'[Date])
VAR Period = 
		DATESINPERIOD('Calendar'[Date], LastSelectedDate, -NumOfMonths, MONTH)
VAR Result =
	CALCULATE(
		AVERAGEX(
				VALUES('Calendar'[CalendarYearMonth]),
				[MsrAmount]	
			),
		Period
		)
VAR LastDateWithTransaction = MAX(Expenses[ExpenseDate])
VAR FirstVisibleDate = MIN('Calendar'[Date])
RETURN
	{IF(FirstVisibleDate <= LastDateWithTransaction, Result)}




-- MsrAverageRollingLast2Y
EVALUATE
CALCULATE(
			AVERAGEX(
					SUMMARIZE(
								'Calendar', 
								'Calendar'[CalendarYear]), 
								[MsrAmount]),
					
					DATESINPERIOD('Calendar'[Date], 
									LASTDATE('Calendar'[Date]),
									-2, 
									YEAR
								)
		)



-------------------------------------------------------
//####################################################
// CALCULATION GROUP
//####################################################
-------------------------------------------------------
// Calculation Items
-- Value
-- Rolling AVG 3M

VAR NumOfMonths = 3
VAR LastSelectedDate = MAX('Calendar'[Date])
VAR Period = 
        DATESINPERIOD('Calendar'[Date], LastSelectedDate, -NumOfMonths, MONTH)
VAR Result =
    CALCULATE(
        AVERAGEX(
                VALUES('Calendar'[CalendarYearMonth]),
                SELECTEDMEASURE ()
            ),
        Period
        )
VAR LastDateWithTransaction = MAX(Expenses[ExpenseDate])
VAR FirstVisibleDate = MIN('Calendar'[Date])
RETURN
    IF(FirstVisibleDate <= LastDateWithTransaction, Result)

--Rolling AVG 12M

VAR NumOfMonths = 12
VAR LastSelectedDate = MAX('Calendar'[Date])
VAR Period = 
        DATESINPERIOD('Calendar'[Date], LastSelectedDate, -NumOfMonths, MONTH)
VAR Result =
    CALCULATE(
        AVERAGEX(
                VALUES('Calendar'[CalendarYearMonth]),
                SELECTEDMEASURE ()
            ),
        Period
        )
VAR LastDateWithTransaction = MAX(Expenses[ExpenseDate])
VAR FirstVisibleDate = MIN('Calendar'[Date])
RETURN
    IF(FirstVisibleDate <= LastDateWithTransaction, Result)
    
    
------------------------------------------------------
//################################
//REPT
//################################
------------------------------------------------------

CalendarYearMonthNumber = 'Date'[CalendarYear] & " - " & REPT("0", 2- LEN('Date'[MonthNumberOfYear])) & 'Date'[MonthNumberOfYear]


-----------------------------------------------------------
//####################################################
// Replace BLANK with 0
-- https://www.youtube.com/watch?v=_cT9PB72fu8&t=739s
//####################################################
-----------------------------------------------------------
-- Option 1: cheating with help of fact Sales table
SalesZero =
 VAR LastSaleEver =
	CALCULATE(MAX('Sales'[Order Date], REMOVEFILTERS())
VAR CurrentDate = MAX('Date'[Date])
VAR FirstSaleEver = 
	CALCULATE(MIN('Sales'[Order Date]), ALLEXCEPT(Sales, 'Product'))
VAR ForceZero = FirstSaleEver <= CurrentDate && CurrentDate <= LastSaleEver
VAR Amt = [Sales Amount] + IF (ForceZero, 0)
RETURN
	Amt


MsrAmountWithZero =
--DEFINE
VAR FirstDateWithExpenses = 
    CALCULATE(
                MIN(Expenses[ExpenseDate]),
                ALLEXCEPT(Expenses, Expenses[ExpenseCategory])
            )
VAR LastDateEver = 
    CALCULATE(
                MAX(Expenses[ExpenseDate]),
                REMOVEFILTERS()
            )
VAR CurrentDate = MAX('Calendar'[Date])
VAR ForceZero =   CurrentDate >= FirstDateWithExpenses && CurrentDate <= LastDateEver
VAR Result = [MsrAmount] + IF(ForceZero,0)
--EVALUATE
RETURN
    Result


-- Option 2: create table and create relationship of this table between Product and Date with many-to-one to each

ZeroGrain = 
VAR LastDateEver = MAX(Sales[Order Date])
VAR ProdsAndDates =
	GENERATE(
		'Product',
		VAR FirstSaleOfProduct = CALCULATE(MIN(Sales[Order Date])
		VAR Dates = DATESBETWEEN('Date'[Date], FirstSalesOfProduct, LastDateEver)
		RETURN
			Dates
		)
VAR Result = 
	SELECTCOLUMNS(
		ProdsAndDates,
		"ProductKey", 'Product'[ProductKey],
		"Date", 'Date'[Date]
		)
RETURN		
	Result

--Measure
SalesZeroG =
	VAR ForceZero = COUNTROWS(ZeroGrain) > 0
	VAR Result = [Sales Amount] + IF(ForceZero, 0)
RETURN
	Result
	
--
EVALUATE
CALCULATETABLE(DISTINCT(ExpenseClassification[ExpenseCategory]), ISBLANK(ExpenseClassification[ExpenseCategory])==FALSE)
--
-- this is table definition based on date level

--DEFINE
--ZeroGrain =
--EVALUATE
DEFINE
VAR LastDateEver = MAX(Expenses[ExpenseDate])
VAR ExpenseCategoryAndDates = 
		GENERATE(
				CALCULATETABLE(DISTINCT(ExpenseClassification[ExpenseCategory]), ISBLANK(ExpenseClassification[ExpenseCategory])==FALSE),				
				VAR FirstExpenseDate = CALCULATE(MIN(Expenses[ExpenseDate]))
				VAR Dates = DATESBETWEEN('Calendar'[Date], FirstExpenseDate, LastDateEver)
				RETURN
					Dates		
		)
EVALUATE
	ExpenseCategoryAndDates

-- this is shortned table definition based on month level

--DEFINE
--ZeroGrain =
--EVALUATE
DEFINE
VAR LastDateEver = MAX(Expenses[ExpenseDate])
VAR ExpenseCategoryAndDates = 
		GENERATE(
				CALCULATETABLE(DISTINCT(ExpenseClassification[ExpenseCategory]), ISBLANK(ExpenseClassification[ExpenseCategory])==FALSE),				
				VAR FirstExpenseDate = CALCULATE(MIN(Expenses[ExpenseDate]))
				VAR Dates = 
						CALCULATETABLE(
								DISTINCT('Calendar'[CalendarYearMonth]),
								DATESBETWEEN('Calendar'[Date], FirstExpenseDate, LastDateEver),
								REMOVEFILTERS('Expenses'[ExpenseCategory])
								)
				RETURN
					Dates		
		)
EVALUATE
	ExpenseCategoryAndDates


-- Need to define relationship first
MsrAmountWithZeroG =
--DEFINE
VAR ForceZero =   COUNTROWS(ZeroGrain) > 0
VAR Result = [MsrAmount] + IF(ForceZero,0)
--EVALUATE
RETURN
    Result


-- Table -- reduce number of rows, use Month
-- Set relationship many to many for this table between Product and Date

ZeroGrain = 
VAR LastDateEver = MAX(Sales[Order Date])
VAR ProdsAndDates =
	GENERATE(
		'Product',
		VAR FirstSaleOfProduct = CALCULATE(MIN(Sales[Order Date])
		VAR Dates = 
			CALCULATETABLE(
				DISTINCT('Date'[Calendar Year Month Number]),
				DATESBETWEEN('Date'[Date], FirstSalesOfProduct, LastDateEver),
				REMOVEFILTERS('Product')
				)
		RETURN
			Dates
		)
VAR Result = 
	SELECTCOLUMNS(
		ProdsAndDates,
		"ProductKey", 'Product'[ProductKey],
		"Calendar Year Month Number", 'Date'[Calendar Year Month Number]
		)
RETURN		
	Result

--Measure
SalesZeroG =
	VAR ForceZero = COUNTROWS(ZeroGrain) > 0
	VAR Result = [Sales Amount] + IF(ForceZero, 0)
RETURN
	Result



--------------------------------------------------------
//#####################################################
//YTD, QTD, MTD, SAMEPERIODLASTYEAR, 
//PREVIOUSYEAR, PREVIOUSQUARTER, PREVIOUSMONTH, PREVIOUSDAY
//STARTOFYEAR
//ENDOFYEAR
//EOMONTH
//EDATE
MsrAmountSamePeriodLastYear = CALCULATE(SUM(Expenses[AmountCAD]),SAMEPERIODLASTYEAR('Calendar'[Date]))
MsrAmountPreviousYear = CALCULATE ( SUM ( Expenses[AmountCAD] ), PREVIOUSYEAR ( 'Calendar'[Date] ) )
MsrAmountSamePeriodLastYear = CALCULATE(SUM(Expenses[AmountCAD]),SAMEPERIODLASTYEAR('Calendar'[Date]))

//#####################################################

EVALUATE
VAR T1 = SELECTCOLUMNS(
			'Calendar',
			"CalDate", Calendar[Date],
			"CalYear", Calendar[CalendarYear],
			"CalSemester", Calendar[CalendarSemester],
			"CalQuarter", Calendar[CalendarQuarter],
			"CalMonth", Calendar[MonthNumberOfYear],
			"StartOfYear", STARTOFYEAR(Calendar[Date]),
			"EndOfYear", ENDOFYEAR(Calendar[Date]),
			--
			"EOMONTH", EOMONTH(Calendar[Date],0),
			"EOMONTH, +1", EOMONTH(Calendar[Date],1),
			"EOMONTH, -1", EOMONTH(Calendar[Date],-1),
			--
			"EDATE", EDATE(Calendar[Date],0),
			"EDATE, +1", EDATE(Calendar[Date],1),
			"EDATE, -1", EDATE(Calendar[Date],-1),
			--
			"FirstDate", FIRSTDATE(Calendar[Date]),
			"LastDate", LASTDATE(Calendar[Date]),
			
						
			"PreviousYear", CALCULATE(MIN(Calendar[Date]),PREVIOUSYEAR(Calendar[Date]))
			
			)
RETURN
	T1

--VAR T2 = ADDCOLUMNS
--			(
--			 T1,
--			 "StartDateYear", [CalDate]
--			)
			

----------------
--MsrAmountYTD = 
EVALUATE
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")

RETURN
{CALCULATE ( 
    --SUM ( Expenses[AmountCAD] ), 
    [MsrAmount],
    DATESYTD (Calendar[Date]), 
    Calendar[Date]<= TodayDate 
    )
  }
--


--MrsAmountTotalYTD =
EVALUATE
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
RETURN
{
TOTALYTD ( 
			--SUM ( Expenses[AmountCAD] ), 
			[MsrAmount],
			CALENDAR[Date],
			Calendar[Date]<= TodayDate
		)
}

----------------

--MsrAmountQTD = 
EVALUATE
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")

RETURN
{CALCULATE ( 
    --SUM ( Expenses[AmountCAD] ), 
    [MsrAmount],
    DATESYTD (Calendar[Date]), 
    Calendar[Date]<= TodayDate 
    )
  }
--


--MrsAmountTotalQTD =
EVALUATE
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
RETURN
{
TOTALYTD ( 
			--SUM ( Expenses[AmountCAD] ), 
			[MsrAmount],
			CALENDAR[Date],
			Calendar[Date]<= TodayDate
		)
}




----------------
--MsrAmountMTD = 
EVALUATE
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")

RETURN
{CALCULATE ( 
    --SUM ( Expenses[AmountCAD] ), 
    [MsrAmount],
    DATESMTD (Calendar[Date]), 
    Calendar[Date]<= TodayDate 
    )
  }
--


--MrsAmountTotalMTD =
EVALUATE
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
RETURN
{
TOTALMTD ( 
			--SUM ( Expenses[AmountCAD] ), 
			[MsrAmount],
			CALENDAR[Date],
			Calendar[Date]<= TodayDate
		)
}





--MsrAmountYTDLastYear =
EVALUATE
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
--VAR StartDate = STARTOFYEAR(Calendar[Date]) - 365
VAR StartDate = EOMONTH(STARTOFYEAR(Calendar[Date]),-13) + 1
VAR EndDate = TodayDate - 365
RETURN
{
CALCULATE (
    --SUM ( Expenses[AmountCAD] ),
    [MsrAmount],
    DATESBETWEEN(Calendar[Date], StartDate, EndDate)
    --PREVIOUSYEAR(Calendar[Date])
   	--DATEADD( DATESYTD ( 'Calendar'[Date] ), -1, YEAR)
    --PARALLELPERIOD(DATESYTD ('Calendar'[Date]),-1, YEAR)
	)
}


QMsrAmountYoYPct = 
VAR __PREV_YEAR = CALCULATE([MsrAmount], DATEADD('Calendar'[Date], -1, YEAR))
RETURN
	DIVIDE([MsrAmount] - __PREV_YEAR, __PREV_YEAR)
	


--
--QMsrAmountYTD = 
EVALUATE
{
TOTALYTD([MsrAmount], 'Calendar'[Date])	
}


--MsrAmountQTD = 
EVALUATE
{CALCULATE(
		//SUM(Expenses[AmountCAD]), 
        [MsrAmount],
        DATESQTD(Calendar[Date])
		)}
		
-----------------------------------------------------------------------------------

MsrAmountQTD = 
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
VAR Result = 
    IF(YEAR(TodayDate) = YEAR(LASTDATE(Calendar[Date])),
       CALCULATE (             
        [MsrAmount],
        DATESQTD(( Calendar[Date]),
        Calendar[Date]<= TodayDate 
        ),
        CALCULATE ( 
        [MsrAmount],
        DATESQTD(Calendar[Date])
        )
    )
RETURN
    Result
    
    
-----------------------------------------------------------------

-- Original
MsrAmountQTD = 
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
VAR StartDate = 
        CALCULATE (             
                MIN(Calendar[Date]),
                'Calendar'[CalendarQuarter] = QUARTER(TodayDate),
                'Calendar'[CalendarYear] = YEAR(TodayDate)
                
                )
VAR Result = 
    IF(YEAR(TodayDate) = YEAR(LASTDATE(Calendar[Date])) && ISFILTERED(Calendar[CalendarYearDesc]),
       CALCULATE (             
        [MsrAmount],
        DATESBETWEEN('Calendar'[Date], StartDate, TodayDate)        
        ),
        CALCULATE ( 
        [MsrAmount],
        DATESQTD(Calendar[Date])
        )
    )
RETURN
    Result
    
----------------------------------------------------
-- Original2
MsrAmountQTD = 
VAR SelectedYear = SELECTEDVALUE('Calendar'[CalendarYear])
VAR SelectedQuarter = SELECTEDVALUE('Calendar'[CalendarQuarter])
VAR StartDate = 
IF(YEAR(TODAY()) = YEAR(LASTDATE(Calendar[Date])) && ISFILTERED(Calendar[CalendarYearDesc]),
        CALCULATE (             
                MIN(Calendar[Date]),
                'Calendar'[CalendarQuarter] = QUARTER(TODAY()),
                'Calendar'[CalendarYear] = YEAR(TODAY())
                ),
        IF(SelectedQuarter = QUARTER(TODAY()),        
        		CALCULATE (             
                		MIN(Calendar[Date]),
                		'Calendar'[CalendarQuarter] = QUARTER(TODAY()),
                		'Calendar'[CalendarYear] = SelectedYear
                		),
                CALCULATE(                
                			MIN(Calendar[Date]),
                			DATESQTD(Calendar[Date])
                		)
        	)
)

VAR EndDate = 
IF(YEAR(TODAY()) = YEAR(LASTDATE(Calendar[Date])) && ISFILTERED(Calendar[CalendarYearDesc]) && SelectedQuarter = QUARTER(TODAY()),
        TODAY(),                
        IF(SelectedQuarter = QUARTER(TODAY()),        	
             	DATE(SelectedYear, MONTH(TODAY()), DAY(TODAY())),
                CALCULATE(                
                			MAX(Calendar[Date]),
                			DATESQTD(Calendar[Date])
                		)
        	)
)
VAR Result =
IF(SelectedYear<=YEAR(TODAY()) && SelectedQuarter<=QUARTER(TODAY()),
       CALCULATE (
        [MsrAmount],
        DATESBETWEEN('Calendar'[Date], StartDate, EndDate)
        ),
        0)
RETURN
    Result
    

------------------------------------------------------------------------------------------------

MsrAmountQTD = 
VAR SelectedYear = SELECTEDVALUE('Calendar'[CalendarYear])
VAR SelectedQuarter = QUARTER(DATE(SelectedYear, MONTH(TODAY()), DAY(TODAY())))
VAR StartDate = 
IF(YEAR(TODAY()) = YEAR(LASTDATE(Calendar[Date])) && ISFILTERED(Calendar[CalendarYearDesc]),
        CALCULATE (             
                MIN(Calendar[Date]),
                'Calendar'[CalendarQuarter] = QUARTER(TODAY()),
                'Calendar'[CalendarYear] = YEAR(TODAY())
                ),                
        		CALCULATE (             
                		MIN(Calendar[Date]),
                		'Calendar'[CalendarQuarter] = QUARTER(TODAY()),
                		'Calendar'[CalendarYear] = SelectedYear
                		)                
        	)

VAR EndDate = 
IF(YEAR(TODAY()) = YEAR(LASTDATE(Calendar[Date])) && ISFILTERED(Calendar[CalendarYearDesc]) && SelectedQuarter = QUARTER(TODAY()),
        TODAY(),                
        DATE(SelectedYear, MONTH(TODAY()), DAY(TODAY()))        
   )
VAR Result =
IF(SelectedYear<=YEAR(TODAY()) && SelectedQuarter<=QUARTER(TODAY()),
       CALCULATE (
        [MsrAmount],
        DATESBETWEEN('Calendar'[Date], StartDate, EndDate)
        ),
        BLANK())
RETURN
    Result


----------------------------------------------------

    
    
------------------------------------------------------------------------------------------------------------------------------------------

QMsrAmountMTD =
EVALUATE
VAR Result = 
TOTALMTD(
    --[MsrAmount],
    [MsrAmt],
    --SUM(Expenses[AmountCAD]),
    'Calendar'[Date]
    )
RETURN
	{Result}
    
MsrAmountMTD = 
EVALUATE
VAR Result = 
CALCULATE(
            --SUM(Expenses[AmountCAD]),
            --[MsrAmount],
            [MsrAmt],
            DATESMTD('Calendar'[Date])
            --FILTER('Calendar','Calendar'[Date]<=TODAY())
            )
RETURN
	{Result}

------------------------------------------------------------------------------------------------------------------------------------------



MsrAmountMTD = 
VAR SelectedYear = SELECTEDVALUE('Calendar'[CalendarYear])
VAR SelectedMonth = MONTH(DATE(SelectedYear, MONTH(TODAY()), DAY(TODAY())))
VAR StartDate = 
IF(YEAR(TODAY()) = YEAR(LASTDATE(Calendar[Date])) && ISFILTERED(Calendar[CalendarYearDesc]),
        CALCULATE (             
                MIN(Calendar[Date]),
                'Calendar'[MonthNumberOfYear] = MONTH(TODAY()),
                'Calendar'[CalendarYear] = YEAR(TODAY())
                ),                
        		CALCULATE (             
                		MIN(Calendar[Date]),
                		'Calendar'[MonthNumberOfYear] = MONTH(TODAY()),
                		'Calendar'[CalendarYear] = SelectedYear
                		)                
        	)

VAR EndDate = 
IF(YEAR(TODAY()) = YEAR(LASTDATE(Calendar[Date])) && ISFILTERED(Calendar[CalendarYearDesc]) && SelectedMonth = MONTH(TODAY()),
        TODAY(),                
        DATE(SelectedYear, MONTH(TODAY()), DAY(TODAY()))        
   )
VAR Result =
IF(SelectedYear<=YEAR(TODAY()) && SelectedMonth<=MONTH(TODAY()),
       CALCULATE (
        [MsrAmount],
        DATESBETWEEN('Calendar'[Date], StartDate, EndDate)
        ),
        BLANK())
RETURN
    Result





MsrDateMTDStart = 
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
VAR Result = 
    IF(YEAR(TodayDate) = YEAR(LASTDATE(Calendar[Date])),
       CALCULATE (             
        MIN(Calendar[Date]),
        DATESMTD ( Calendar[Date]),
        Calendar[Date]<= TodayDate
        ),
        CALCULATE ( 
        MIN(Calendar[Date]),
        DATESMTD(Calendar[Date])
        )
    )
RETURN
    Result



MsrDateMTDEnd = 
VAR TodayDate = CALCULATE(MAX(Calendar[Date]), Calendar[IsToday]="Yes")
VAR Result = 
    IF(YEAR(TodayDate) = YEAR(LASTDATE(Calendar[Date])),
       CALCULATE (             
        MAX(Calendar[Date]),
        DATESMTD ( Calendar[Date]),
        Calendar[Date]<= TodayDate
        ),
        CALCULATE ( 
        MAX(Calendar[Date]),
        DATESMTD(Calendar[Date])
        )
    )
RETURN
    Result


------------------------------------------------------------------------------------------------------
DEFINE
    VAR MinimumAmount = 2000000
    VAR MaximumAmount = 8000000
EVALUATE
FILTER (
    ADDCOLUMNS (
        SUMMARIZE ( Sales, 'Product'[Category] ),
        "CategoryAmount", [Sales Amount]
    ),
    AND (
        [CategoryAmount] >= MinimumAmount,
        [CategoryAmount] <= MaximumAmount
    )
)
ORDER BY [CategoryAmount]


EVALUATE
			CALCULATETABLE
				(
					
					ADDCOLUMNS
						(
							SUMMARIZE('Previous Calendar', 'Previous Calendar'[CalendarYear]),
							"Amount", [MsrAmount]
						),
					DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
										YEAR
								)
				)
RETURN
	MaxYear
		

----------------------------------
MsrMinTotalRollingP10Y =
EVALUATE
CALCULATE(
			MAXX(
					SUMMARIZE(
								'Previous Calendar', 
								'Previous Calendar'[CalendarYear]), 
								[MsrAmount]),
					
					DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)
		)

----------------------------------

MsrMaxTotalRollingP10Y = 
CALCULATE(
			MAXX(
					SUMMARIZE(
								'Previous Calendar', 
								'Previous Calendar'[CalendarYear]), 
								[MsrAmount]),
					
					DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)
		)			
				
--------------------------------
MsrMinYearRollingP10Y = 
VAR StartYear = 
    CALCULATE(MIN('Previous Calendar'[CalendarYear]),
    DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)
    )
RETURN
    StartYear

---------------------------------
MsrMaxYearRollingP10Y = 
VAR FinalYear = 
    CALCULATE(MAX('Previous Calendar'[CalendarYear]),
    DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)
    )
RETURN
    FinalYear
    
----------------------------------

ExpensesSummary = 
CALCULATETABLE
				(
					ADDCOLUMNS
						(
							SUMMARIZE('Previous Calendar', 'Previous Calendar'[CalendarYear]),
							"Amount", [MsrAmt],
                            "MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)

----------------------------------
-- Version 1
ExpensesSummary =
EVALUATE
VAR T1 = 
	CALCULATETABLE
				(
					ADDCOLUMNS					
						(
							SUMMARIZE('Previous Calendar', 							
							'Previous Calendar'[CalendarYear]
							)
								,
							"Amount", [MsrAmt],
                            "MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)
	
VAR T2 = 
	SELECTCOLUMNS(T1, 
					"CalYear", 'Previous Calendar'[CalendarYear],
					"Amt", [Amount]					
					)

RETURN
	T2 ORDER BY [CalYear]

------------------------------------
-- Version 2
ExpensesSummary =
EVALUATE
VAR T1 = 
	CALCULATETABLE
				(
					ADDCOLUMNS					
						(
						SELECTCOLUMNS
							(						
								SUMMARIZE('Previous Calendar','Previous Calendar'[CalendarYear]),
								"CalYear",'Previous Calendar'[CalendarYear]
							),
							"@Amount", [MsrAmount],
                            "@MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "@MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)
RETURN
	T1 ORDER BY [CalYear]
	

/*
ExpensesSummary = 
CALCULATETABLE
				(
					ADDCOLUMNS
						(
							SUMMARIZE('Previous Calendar', 'Previous Calendar'[CalendarYear]),
							"Amount", [MsrAmt],
                            "MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)
*/


ExpensesRollingAmountSummaryByYear =  -- Original
EVALUATE
VAR T1 =
CALCULATETABLE
				(
					ADDCOLUMNS					
						(
						SELECTCOLUMNS
							(						
								SUMMARIZE('Previous Calendar','Previous Calendar'[CalendarYear]),
								"CalYear",'Previous Calendar'[CalendarYear]
							),
							"Amount", [MsrAmount],
                            "MinTotalRollingP10Y", ROUND([MsrMinTotalRollingP10Y],0),
                            "MaxTotalRollingP10Y", ROUND([MsrMaxTotalRollingP10Y],0)
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)
RETURN
	T1
	
	
ExpensesRollingAmountSummaryByYear =  -- Modification
EVALUATE
VAR MinYear =
CALCULATE(
			MIN('Previous Calendar'[CalendarYear]), 
			
					
					DATESINPERIOD('Previous Calendar'[Date], 
									EDATE(LASTDATE('Previous Calendar'[Date]),-12),
									-10, 
									YEAR
								)
		)

VAR MaxYear =
CALCULATE(
			MAX('Previous Calendar'[CalendarYear]), 
					DATESINPERIOD('Previous Calendar'[Date], 
									EDATE(LASTDATE('Previous Calendar'[Date]),-12),
									-10, 
									YEAR
								)
		)
VAR T1 =
CALCULATETABLE
				(
					ADDCOLUMNS					
						(
						SELECTCOLUMNS
							(						
								SUMMARIZE('Previous Calendar','Previous Calendar'[CalendarYear]),
								"CalYear",'Previous Calendar'[CalendarYear]
							),
							"Amount", [MsrAmount],
                            "MinTotalRollingP10Y", ROUND([MsrMinTotalRollingP10Y],0),
                            "MaxTotalRollingP10Y", ROUND([MsrMaxTotalRollingP10Y],0)
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)
VAR T2 =
	FILTER(T1, [CalYear]<=YEAR(LASTDATE('Previous Calendar'[Date])))
	
RETURN
	T2
	

MsrMinDateRollingP10Y = 
EVALUATE
VAR MinYear =
CALCULATE(
			MIN('Previous Calendar'[CalendarYear]), 
			
					
					DATESINPERIOD('Previous Calendar'[Date], 
									EDATE(LASTDATE('Previous Calendar'[Date]),-12),
									-10, 
									YEAR
								)
		)
RETURN
	{MinDate}
--------------------------------------------------	
MsrMinDateRollingP10Y = 
EVALUATE
VAR MaxYear =
CALCULATE(
			MAX('Previous Calendar'[CalendarYear]), 
			
					
					DATESINPERIOD('Previous Calendar'[Date], 
									EDATE(LASTDATE('Previous Calendar'[Date]),-12),
									-10, 
									YEAR
								)
		)
RETURN
	{MaxYear}

IF 
	
------------------------------------
-- Version 3 with FILTER IN SUMMARIZE
ExpensesSummary =
EVALUATE
VAR StartYear =
	YEAR(
		CALCULATE
			(
				MIN('Previous Calendar'[Date]),
				 DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)	
			)
		)
--RETURN
--	{YEAR(StartYear)}
VAR T1 = 
	CALCULATETABLE
				(
					ADDCOLUMNS					
						(
						SELECTCOLUMNS
							(						
								SUMMARIZE(
										FILTER('Previous Calendar', 'Previous Calendar'[CalendarYear]>=StartYear),
										'Previous Calendar'[CalendarYear]
										),
								"CalYear",'Previous Calendar'[CalendarYear]
							),
							"@Amount", [MsrAmount],
                            "@MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "@MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)
RETURN
	T1 ORDER BY [CalYear]



---------------------------------------------
-- working 1 
MsrMaxRollingAmountP10Y =
EVALUATE
VAR T1 = 
	CALCULATETABLE
				(
					ADDCOLUMNS					
						(
						SELECTCOLUMNS
							(						
								SUMMARIZE('Previous Calendar','Previous Calendar'[CalendarYear]),
								"CalYear",'Previous Calendar'[CalendarYear]
							),
							"@Amount", [MsrAmount],
                            "@MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "@MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)

VAR	StartYear = MINX(T1,[CalYear])
VAR EndYear =
    CALCULATE(MAX('Previous Calendar'[CalendarYear]),
    DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)
    )

VAR Result =
	MAXX(FILTER(T1, [CalYear]= EndYear),[@MaxTotalRollingP10Y])

RETURN
	{(Result, EndYear)}


	

---------------------------------------------
-- working 2 -- This will be same result as MsrMinTotalRollingP10Y
MsrMinRollingAmountP10YStatic =
EVALUATE
VAR StartYear =
	YEAR(
		CALCULATE
			(
				MIN('Previous Calendar'[Date]),
				 DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)	
			)
		)
VAR T1 = 
	CALCULATETABLE
				(
					ADDCOLUMNS					
						(
						SELECTCOLUMNS
							(						
								SUMMARIZE(
										FILTER('Previous Calendar', 'Previous Calendar'[CalendarYear]>=StartYear),
										'Previous Calendar'[CalendarYear]
										),
								"CalYear",'Previous Calendar'[CalendarYear]
							),
							"@Amount", [MsrAmount],
                            "@MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "@MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)

VAR EndYear = 
		SELECTEDVALUE('Calendar'[CalendarYear],
						MAXX(T1,[CalYear])
						)
	/*
    CALCULATE(MAX('Previous Calendar'[CalendarYear]),
    DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)
    )*/
    

VAR Result =
	MAXX(FILTER(T1, [CalYear]= EndYear),[@MinTotalRollingP10Y])

RETURN
	{(Result, StartYear, EndYear)}



---------------------------------------------
-- working 3 -- This will be same result as MsrMaxTotalRollingP10Y
MsrMaxRollingAmountP10YStatic =
EVALUATE
VAR StartYear =
	YEAR(
		CALCULATE
			(
				MIN('Previous Calendar'[Date]),
				 DATESINPERIOD('Previous Calendar'[Date], 
									LASTDATE('Previous Calendar'[Date]),
									-10, 
									YEAR
								)	
			)
		)

VAR T1 = 
	CALCULATETABLE
				(
					ADDCOLUMNS					
						(
						SELECTCOLUMNS
							(						
								SUMMARIZE(
										FILTER('Previous Calendar', 'Previous Calendar'[CalendarYear]>=StartYear),
										'Previous Calendar'[CalendarYear]
										),
								"CalYear",'Previous Calendar'[CalendarYear]
							),
							"@Amount", [MsrAmount],
                            "@MinTotalRollingP10Y", [MsrMinTotalRollingP10Y],
                            "@MaxTotalRollingP10Y", [MsrMaxTotalRollingP10Y]
						),
                    USERELATIONSHIP('Calendar'[Date], 'Previous Calendar'[Date])
				)

--RETURN
--	T1 ORDER BY [CalYear]

--VAR	StartYear = MINX(T1,[CalYear])
VAR EndYear = 	
			SELECTEDVALUE('Calendar'[CalendarYear],
						MAXX(T1,[CalYear])
						)

VAR Result =
	MAXX(FILTER(T1, [CalYear]= EndYear),[@MaxTotalRollingP10Y])

--RETURN
--	{Result}

RETURN
	{(Result, StartYear, EndYear)}

				
--RETURN
--	{MAXX(T1,[CalYear])}

-----------------------------------------------
EVALUATE
VAR Y1 = 2022
RETURN
{LOOKUPVALUE(ExpensesRollingAmountSummaryByYear[MinTotalRollingP10Y], ExpensesRollingAmountSummaryByYear[CalYear], Y1)}

EVALUATE
VAR Y1 = 2022
RETURN
{LOOKUPVALUE(ExpensesRollingAmountSummaryByYear[MaxTotalRollingP10Y], ExpensesRollingAmountSummaryByYear[CalYear], Y1)}
				



----------------------------------------------	


//4 use variables, the code is more verbose, longer.
EVALUATE
VAR	BaseCalendar =
		CALENDAR(DATE(2016,1,1), DATE(2018,12,31))
VAR	RenamedCalendar = 
		SELECTCOLUMNS (BaseCalendar, "Calendar[Date]", [Date])
VAR	Calendar_1 = 
		SELECTCOLUMNS (
			RenamedCalendar,
			"Date", 'Calendar'[Date],
			"Year", YEAR(Calendar[Date]),
			"Month Number", MONTH(Calendar[Date]),
			"Month", FORMAT(Calendar[Date], "mmmm"),
			"Year Month", FORMAT(Calendar[Date], "mmm yy")
		)
VAR	Calendar_2 =
		ADDCOLUMNS (Calendar_1, "Year Month Number", [Year] * 12 + [Month Number] -1)
RETURN	
	Calendar_2

------------------------------------------------------------------------------------------------------------------------------------------
EVALUATE
{
CALCULATE (
	SUM(Expenses[AmountCAD]), 
	FILTER(Calendar,'Calendar'[IsThisPCBillingCycle]="Yes"),
	FILTER(Institution, Institution[InstitutionName]= "PC Financial")
	)
}



EVALUATE
CALCULATETABLE(
				SUMMARIZE(
						Expenses, 
						Expenses[ExpenseCategory], 
						Expenses[ExpenseCode]
						),
				Expenses[ExpenseCategory]<>BLANK()
			)


EVALUATE
CALCULATETABLE (
    SUMMARIZE (
        Sales,
        'Product'[Brand],
        'Date'[Calendar Year]
    ),
    'Product'[Color] = "Silver Grey"
)



-- This works
DEFINE TABLE FoodGroceries = 
	SUMMARIZECOLUMNS(
					Expenses[ExpenseCategory], 
					FILTER(Expenses, Expenses[ExpenseCategory]="Food Groceries") , 
					"Amt", SUM(Expenses[AmountCAD]), 
					"MinExpenseDate", MIN(Expenses[ExpenseDate])
					)
EVALUATE
	SUMMARIZECOLUMNS(
			FoodGroceries[ExpenseCategory],
			"Total Amt",
			SUM(FoodGroceries[Amt])
			)

-- This does NOT work (DEFINED TABLE can't be referenced by another table)
DEFINE TABLE FoodGroceries = 
	SUMMARIZECOLUMNS(
					Expenses[ExpenseCategory], 
					FILTER(Expenses, Expenses[ExpenseCategory]="Food Groceries") , 
					"Amt", SUM(Expenses[AmountCAD]), 
					"MinExpenseDate", MIN(Expenses[ExpenseDate])
					)
TABLE FoodGroceries2 = 
	SUMMARIZECOLUMNS(
			FoodGroceries[ExpenseCategory],
			"Total Amt",
			SUM(FoodGroceries[Amt])
			)
EVALUATE
	FoodGroceries2


-- This does NOT work for defined column(DEFINED TABLE can't be referenced)
DEFINE TABLE FoodGroceries = 
	SUMMARIZECOLUMNS(
					Expenses[ExpenseCategory], 
					FILTER(Expenses, Expenses[ExpenseCategory]="Food Groceries") , 
					"Amt", SUM(Expenses[AmountCAD]), 
					"MinExpenseDate", MIN(Expenses[ExpenseDate])
					)
COLUMN FoodGroceries[Amt2] = FoodGroceries[Amt]
	
EVALUATE
	FoodGroceries
	

-- different between table and variable definition
DEFINE 
	TABLE T1 = VALUES(Expenses[ExpenseCode])
	VAR V1 = VALUES(Expenses[Expensecode])
EVALUATE
	ADDCOLUMNS(T1, "Amt", [Amount1]) --> ADDCOLUMNS within filter context
EVALUATE
	ADDCOLUMNS(V1, "Amt", Expenses[AmountCAD])
	
	
	
---------------------------------------------------------------------------
-- DEFINE COLUMN
---------------------------------------------------------------------------
DEFINE
	COLUMN Expenses[Spending Category] = 
			IF (
				Expenses[AmountCAD]>= 1000,
				"High",
				"Low"
				)

EVALUATE
	SUMMARIZECOLUMNS(
		Expenses[Spending Category],
		"Amt",
			SUM(Expenses[AmountCAD])
		)
	

--------------------------------------------------------------------------
//#################################################
-- CALENDAR
//#################################################
-- ADDCOLUMNS
--------------------------------------------------------------------------


--------------------------------------------------------------------------
EVALUATE
ADDCOLUMNS (
	CALENDARAUTO(),
	"Year", YEAR ([Date]),
	"Month", FORMAT([Date], "mmmm"),
	"Month Number", MONTH([Date]),
	"Quarter", FORMAT( [Date], "\QQ")
)

EVALUATE
ADDCOLUMNS (
	CALENDAR(DATE(2016,1,1), DATE(2018,12,31)),
	"Year", YEAR ([Date]),
	"Month", FORMAT([Date], "mmmm"),
	"Month Number", MONTH([Date]),
	"Quarter", FORMAT( [Date], "\QQ")
)


// Date Table
EVALUATE
VAR Days = CALENDAR(DATE(2016,1,1), DATE(2018,12,31))
RETURN ADDCOLUMNS (
Days,
"Year", YEAR([Date]),
"Month Number", MONTH([Date]),
"Month", FORMAT([Date], "mmmm"),
"Year Month Number", YEAR([Date]) * 12 + MONTH([Date]) - 1,
"Year Month", FORMAT([Date],"mmm yy")
)

-----------------------------------------------------------------------

// Wrong syntax
EVALUATE
RETURN ADDCOLUMNS (
	CALENDARAUTO()
	"Year", YEAR ([Date]),
	"Month", FORMAT([Date], "mmmm"),
	"Month Number", MONTH([Date]),
	"Quarter", FORMAT( [Date], "\QQ")
)

-----------------------------------------------------------------------

EVALUATE
VAR Days = CALENDARAUTO()
RETURN ADDCOLUMNS (
	Days,
	"Year", YEAR ([Date]),
	"Month", FORMAT([Date], "mmmm"),
	"Month Number", MONTH([Date]),
	"Quarter", FORMAT( [Date], "\QQ")
)

---------------------------------------------------------------------
---------------------------------------------------------------------


EVALUATE
VAR Table1 = 
	{
		(1,2,3, DATE(2021,1,1)),
		(4,5,6, DATE(2021,1,1))	
	}
VAR Table2 =
	SELECTCOLUMNS(
					Table1,
					"ColumnName1", [Value1],
					"ColumnName2", [Value2],
					"ColumnName3", [Value3],
					"ColumnName4", [Value4]
				)
RETURN 	Table2

---------------------------
EVALUATE
SELECTCOLUMNS(
				CALENDAR(DATE(2016,1,1), DATE(2018,12,31)),
				"MyDate", [Date]
			)

EVALUATE
	ADDCOLUMNS(
			SELECTCOLUMNS(
					CALENDAR(DATE(2016,1,1), DATE(2018,12,31)),
					"MyDate", [Date]
					),
					"Year", YEAR([MyDate]),
					"Month Number", MONTH([MyDate]),
					"Month", FORMAT([MyDate], "mmmm"),
					"Year Month", FORMAT([MyDate],"mmm yy")
		)


----------------------------------------------------------------------
// to add the name of the table for [Date]
EVALUATE
ADDCOLUMNS(
	ADDCOLUMNS(
			SELECTCOLUMNS(
					CALENDAR(DATE(2016,1,1), DATE(2018,12,31)),
					"MyDate", [Date]
					),
					"Year", YEAR([MyDate]),
					"Month Number", MONTH([MyDate]),
		"Month", FORMAT([MyDate], "mmmm"),
		"Year Month", FORMAT([MyDate],"mmm yy")
		),
	"Year Month Number", [Year] * 12 + [Month Number] - 1
)

----------------------------------------------------------------------
// to add the name of the table for [Date]
EVALUATE
ADDCOLUMNS(
	ADDCOLUMNS(
			SELECTCOLUMNS(
					CALENDAR(DATE(2016,1,1), DATE(2018,12,31)),
					"Calendar[Date]", [Date]
					),
					"Year", YEAR(Calendar[Date]),
					"Month Number", MONTH(Calendar[Date]),
		"Month", FORMAT(Calendar[Date], "mmmm"),
		"Year Month", FORMAT(Calendar[Date],"mmm yy")
		),
	"Year Month Number", [Year] * 12 + [Month Number] - 1
)


--------------------------------------------------------------------
//4 use variables, the code is more verbose, longer.
EVALUATE
VAR	BaseCalendar =
		CALENDAR(DATE(2016,1,1), DATE(2018,12,31))
VAR	RenamedCalendar = 
		SELECTCOLUMNS (BaseCalendar, "Calendar[Date]", [Date])
RETURN RenamedCalendar


EVALUATE
VAR	BaseCalendar =
		CALENDAR(DATE(2016,1,1), DATE(2018,12,31))
VAR	RenamedCalendar = 
		SELECTCOLUMNS (BaseCalendar, "Calendar[Date]", [Date])
VAR	Calendar_1 = 
		SELECTCOLUMNS (
			RenamedCalendar,
			"Date", 'Calendar'[Date],
			"Year", YEAR(Calendar[Date]),
			"Month Number", MONTH(Calendar[Date]),
			"Month", FORMAT(Calendar[Date], "mmmm"),
			"Year Month", FORMAT(Calendar[Date], "mmm yy")
		)
VAR	Calendar_2 =
		ADDCOLUMNS (Calendar_1, "Year Month Number", [Year] * 12 + [Month Number] -1)
RETURN	
	Calendar_2


---------------------------------------------------------------------
// 5 This one will not work because ROW() expect a single row/value.
EVALUATE
VAR BaseCalendar = 
	CALENDARAUTO()
	//CALENDAR( DATE(2016,1,1), DATE(2018,12,31) )
	//RETURN BaseCalendar
	//RETURN ROW("Day", "A")
VAR	RenamedCalendar = 
		SELECTCOLUMNS (BaseCalendar, "MyDate", [Date])
RETURN RenamedCalendar
RETURN 
	ROW("Day", RenamedCalendar)



// 5 This one will work after ensuring only return 1 row
EVALUATE
VAR BaseCalendar = 
	//CALENDARAUTO()
	CALENDAR( DATE(2021,1,1), DATE(2021,1,1))
	//RETURN BaseCalendar
	//RETURN ROW("Day", "A")
	//VAR	RenamedCalendar = 
	//SELECTCOLUMNS (BaseCalendar, "MyDate", [Date])
	//RETURN RenamedCalendar
RETURN ROW("Day", BaseCalendar)


-----------------------------------------------------------------------------
EVALUATE
	{DAY(TODAY())}

EVALUATE
	{
		DATE(YEAR(TODAY()), MONTH(TODAY()), DAY(TODAY()))
	}
EVALUATE
	{
		DATEDIFF((DATE(YEAR(TODAY()),1,1)), TODAY(),DAY)
	}
	

EVALUATE
	{
		DATEDIFF ( DATE ( YEAR ( 'Table'[Date] ), 1, 1 ), 'Table'[Date], DAY ) + 1		
	}

-- DATEDIFF(<Date1>, <Date2>, <Interval>)

-----------------------------------------------------------------------------
EVALUATE
VAR BaseCalendar = 
	CALENDARAUTO()
VAR	RenamedCalendar = 
	SELECTCOLUMNS (BaseCalendar, "MyDate", [Date])
//RETURN
//	YEAR(MyDate)
	
RETURN
	DATEDIFF(DATE(YEAR (BaseCalendar),1,1), BaseCalendar, DAY ) + 1	
	



//5 GENERATE Calendar function
EVALUATE
VAR BaseCalendar = 
	CALENDARAUTO()
	//CALENDAR( DATE(2016,1,1), DATE(2018,12,31) )
RETURN
	GENERATE(
		BaseCalendar,
		VAR	BaseDate = [Date]
		VAR	intYearDate = YEAR(BaseDate)
		VAR strCalendarYearDesc = "CY " & CONVERT(intYearDate, STRING)
		VAR dtDateFormat = FORMAT(BaseDate, "mm/dd/yyyy")
		VAR dtCalendarYearMonthFirst = EOMONTH(BaseDate, -1) + 1
		VAR strCalendarYearMonth = FORMAT(BaseDate, "yyyy-mm")
		VAR dtCalendarYearMonthName = FORMAT(BaseDate, "yyyy-mmm")
		VAR dtCalendarMonthNameYear = FORMAT(BaseDate, "mmmm yyyy")
		VAR dtCalendarYearMonthDayName = FORMAT(BaseDate, "yyyy-mmm-d")
		VAR dtDateYearMonth = FORMAT(BaseDate, "yyyy-mm-dd")
		VAR intDayNumberOfWeek = WEEKDAY(BaseDate)
		VAR strEnglishDayNameOfWeek = FORMAT(BaseDate, "dddd")		
		VAR intDayNumberOfMonth = DAY(BaseDate)
		VAR intMonthNumberOfYear = MONTH(BaseDate)
		VAR intDayNumberOfYear = DATEDIFF(DATE(intYearDate, 1, 1), BaseDate, DAY) + 1
		VAR intWeekNumberOfYear = WEEKNUM(BaseDate)
		VAR strMonthName = FORMAT(BaseDate, "mmmm")
		VAR intCalendarQuarter = QUARTER(BaseDate)
		VAR intCalendarSemester = SWITCH(intCalendarQuarter, 1, 1, 2,1, 3, 2, 4, 2, 0)
		VAR strCalendarSemesterDesc = strCalendarYearDesc & " H" & CONVERT(intCalendarSemester, STRING)
		VAR strCalendarQuarterDesc = strCalendarYearDesc & " Q" & CONVERT(intCalendarQuarter, STRING)
		VAR strCalendarWeekDesc = "Week " & CONVERT(intWeekNumberOfYear, STRING) & " " & strCalendarYearDesc
		
		VAR dtTodayDate = TODAY()
		VAR dtThisWeekendDate = TODAY() + (7 - WEEKDAY(TODAY(),1))
		VAR dtLast4WDate = (TODAY() + (7 - WEEKDAY(TODAY(),1)))-30
		VAR dtThisMonthEndDate = EOMONTH(TODAY(),0)
		VAR dtLast6MDate = EOMONTH(TODAY(),-6) + 1
		VAR dtLast2YDate = EDATE(dtTodayDate, -24)
		VAR dtLast3YDate = EDATE(dtTodayDate, -36)
		VAR dtLast4YDate = EDATE(dtTodayDate, -48)
		VAR dtLast7YDate = EDATE(dtTodayDate, -84)
		VAR dtWeekStartDate = BaseDate - WEEKDAY(BaseDate,1)+1
		VAR dtWeekEndDate = BaseDate - WEEKDAY(BaseDate,1)+7
				
		VAR intLast12MQuarter = QUARTER(EOMONTH(TODAY(),-12) + 1)
		VAR intLast12MYear = YEAR(EOMONTH(TODAY(),-12) + 1)
						
		//----------------------------------------------------------------------------
		//VAR dtPCBillingStart = IF(intDayNumberOfMonth>= 26, DATE(intYearDate, intMonthNumberOfYear, 26), IF(intMonthNumberOfYear=1, DATE(intYearDate-1, 12, 26), DATE(intYearDate, intMonthNumberOfYear-1, 26)))
		VAR dtPCBillingStart = IF(DAY(TODAY()) >= 26 && DAY(TODAY()) <= 31, 
				DATEVALUE(CONVERT(MONTH(TODAY()), STRING) & "/" & CONVERT(26, STRING) & "/" & CONVERT(YEAR(TODAY()), STRING)),
				IF(DAY(TODAY()) >= 1 && DAY(TODAY()) <= 25 && MONTH(TODAY())<>1, 
				DATEVALUE(CONVERT(MONTH(TODAY())-1, STRING) & "/" & CONVERT(26, STRING) & "/" & CONVERT(YEAR(TODAY()), STRING)),
				DATEVALUE(CONVERT(12, STRING) & "/" & CONVERT(26, STRING) & "/" & CONVERT(YEAR(TODAY())-1, STRING))
				)
				)

		//VAR dtPCBillingEnd = IF(intDayNumberOfMonth>= 26, IF(intMonthNumberOfYear=12, DATE(intYearDate+1, 1, 25), DATE(intYearDate, intMonthNumberOfYear+1, 25)), DATE(intYearDate, intMonthNumberOfYear, 25))		
		VAR dtPCBillingEnd = IF(DAY(TODAY()) >= 1 && DAY(TODAY()) <= 25, 
				DATEVALUE(CONVERT(MONTH(TODAY()), STRING) & "/" & CONVERT(25, STRING) & "/" & CONVERT(YEAR(TODAY()), STRING)),
				IF(DAY(TODAY()) >= 26 && DAY(TODAY()) <= 31 && MONTH(TODAY())<>12, 
				DATEVALUE(CONVERT(MONTH(TODAY())+1, STRING) & "/" & CONVERT(25, STRING) & "/" & CONVERT(YEAR(TODAY()), STRING)),
				DATEVALUE(CONVERT(1, STRING) & "/" & CONVERT(25, STRING) & "/" & CONVERT(YEAR(TODAY())+1, STRING))
				)
				)
		VAR strPCBillingCycle = CONVERT(FORMAT(dtPCBillingStart, "yyyymmdd"), STRING) & " Thru " & CONVERT(FORMAT(dtPCBillingEnd, "yyyymmdd"), STRING)
		VAR strIsThisPCBillingCycle = IF(BaseDate>= dtPCBillingStart && BaseDate <= dtPCBillingEnd, "Yes", "No")
		//----------------------------------------------------------------------------
		VAR dtPCBillingStartLastCycle = EDATE(dtPCBillingStart,-1)
		VAR dtPCBillingEndLastCycle = EDATE(dtPCBillingEnd, -1)		
		VAR strPCBillingLastCycle = CONVERT(FORMAT(dtPCBillingStartLastCycle, "yyyymmdd"), STRING) & " Thru " & CONVERT(FORMAT(dtPCBillingEndLastCycle, "yyyymmdd"), STRING)
		VAR strIsPreviousPCBillingCycle = IF(BaseDate>= dtPCBillingStartLastCycle && BaseDate <= dtPCBillingEndLastCycle, "Yes", "No")
		//------------------------------------------------------------------------------
		
		VAR dtLast6PCBillingStartCycle = EDATE(dtPCBillingStart,-6)
		VAR strIsLast6PCBillingStartCycle = IF(BaseDate>=dtLast6PCBillingStartCycle && BaseDate <= dtPCBillingEnd, "Yes", "No")		
		//------------------------------------------------------------------------------
		
		VAR strIsLast2YDate = IF(BaseDate<=dtTodayDate && BaseDate >= dtLast2YDate, "Yes", "No")
		VAR strIsLast3YDate = IF(BaseDate<=dtTodayDate && BaseDate >= dtLast3YDate, "Yes", "No")
		VAR strIsLast4YDate = IF(BaseDate<=dtTodayDate && BaseDate >= dtLast4YDate, "Yes", "No")
		VAR strIsLast7YDate = IF(BaseDate<=dtTodayDate && BaseDate >= dtLast7YDate, "Yes", "No")	
		VAR strIsLast4WDate = IF(BaseDate<=dtThisWeekendDate && BaseDate >= dtLast4WDate, "Yes", "No")
		VAR strIsLast6MDate = IF(BaseDate>= dtLast6MDate && BaseDate<= dtThisMonthEndDate, "Yes","No")
		VAR strIsLast4QDate = IF(intCalendarQuarter>= intLast12MQuarter && intYearDate >= intLast12MYear && BaseDate<=dtTodayDate,"Yes", "No")
		
		VAR strIsToday = IF(FORMAT(BaseDate, "mm/dd/yyyy") = FORMAT(NOW(), "mm/dd/yyyy"), "Yes", "No")
		VAR strIsThisWeek = IF(WEEKNUM(NOW(),1) = intWeekNumberOfYear && YEAR(NOW()) = intYearDate, "Yes", "No")
		VAR strIsThisMonth = IF(MONTH(TODAY()) = intMonthNumberOfYear && YEAR(NOW()) = intYearDate, "Yes", "No")
		VAR strIsThisQuarter = IF(QUARTER(TODAY()) = intCalendarQuarter && YEAR(NOW()) = intYearDate, "Yes", "No")
		
		//-------------------------------------------------------------------------------
		
		//VAR dtPCFinancialBillingCycle = IF(intDayNumberOfMonth>= 26, DATE(intYearDate, intMonthNumberOfYear, 26), IF(intMonthNumberOfYear=1, DATE(intYearDate-1, 12, 26), DATE(intYearDate, intMonthNumberOfYear-1, 26)))
		//FORMAT(BaseDate, "yyyymmdd")
		
		//VAR CalendarWeek = 
		//VAR CalendarWeekDesc = 
		//VAR CalendarWeekEndingDate = 
		//VAR EndOfMonth 
		//VAR EndOfMonthName 
		//VAR WeekDayIndicator 
		//VAR LastDayOfWeekIndicator = 
		//VAR LastDayOfMonthIndicator = 
		//VAR PCFinancialBillingCycle 
		//VAR PCFinancialBilingEnd
		//VAR AmexBillingCycle
		//VAR AmexBillingEnd
		//VAR RBCVisaBillingCyle
		//VAR RBCVisaBillingEnd
		//VAR	MonthNumber = MONTH([Date])
		
		//VAR	YearMonthName = FORMAT([Date], "mmm yy")
		//VAR	YearMonthNumber = YearDate * 12 + MonthNumber - 1
		RETURN ROW (
			//"Date", BaseDate,
			"DateFormat", dtDateFormat,
			"DateYearMonth", dtDateYearMonth,
			"DayNumberOfWeek", intDayNumberOfWeek,
			"EnglishDayNameOfWeek", strEnglishDayNameOfWeek,
			"DayNumberOfMonth", intDayNumberOfMonth,			
			"DayNumberOfYear", intDayNumberOfYear,			
			"WeekNumberOfYear", intWeekNumberOfYear,
			"MonthNumberOfYear", intMonthNumberOfYear,
			"EnglishMonthName", strMonthName,
			"CalendarYear", intYearDate,
			"CalendarYearDesc", strCalendarYearDesc,
			"CalendarYearMonthName", dtCalendarYearMonthName,
			"CalendarMonthNameYear", dtCalendarMonthNameYear,
			"CalendarYearMonth", strCalendarYearMonth,
			"CalendarYearMonthFirst", dtCalendarYearMonthFirst,
			"CalendarYearMonthDayName", dtCalendarYearMonthDayName,
			"CalendarSemester", intCalendarSemester,
			"CalendarSemesterDesc", strCalendarSemesterDesc,
			"CalendarQuarter", intCalendarQuarter,
			"CalendarQuarterDesc", strCalendarQuarterDesc,
			"CalendarWeek", intWeekNumberOfYear,
			"CalendarWeekDesc", strCalendarWeekDesc,
			"TodayDate", dtTodayDate,
			"ThisWeekendDate", dtThisWeekendDate,
			"ThisMonthEndDate", dtThisMonthEndDate,
			"WeekStartDate", dtWeekStartDate,
			"WeekEndDate", dtWeekEndDate,
			
			"Last6MDate" , dtLast6MDate,
			"Last2YDate" , dtLast2YDate,
			"Last3YDate" , dtLast3YDate,
			"Last4YDate" , dtLast4YDate,
			"Last7YDate" , dtLast7YDate,
			"Last4WDate" , dtLast4WDate,
			
		    "IsLast2YDate" , strIsLast2YDate,
		    "IsLast3YDate" , strIsLast3YDate,
		    "IsLast4YDate" , strIsLast4YDate,
		    "IsLast7YDate" , strIsLast7YDate,
			"IsLast4WDate" , strIsLast4WDate,
			"IsLast6MDate" , strIsLast6MDate,
			"IsLast4QDate" , strIsLast4QDate,
			
			"IsToday", strIsToday,
			"IsThisWeek", strIsThisWeek,
			"IsThisMonth", strIsThisMonth,
			"IsThisQuarter", strIsThisQuarter,
			
			"PCBillingStart", dtPCBillingStart,
			"PCBillingEnd", dtPCBillingEnd,			
			"PCBillingCycle", strPCBillingCycle,
			"IsThisPCBillingCycle", strIsThisPCBillingCycle,
			
			"PCBillingStartLastCycle", dtPCBillingStartLastCycle,
			"PCBillingEndLastCycle", dtPCBillingEndLastCycle,
			"PCBillingLastCycle", strPCBillingLastCycle,
			"IsPreviousPCBillingCycle", strIsPreviousPCBillingCycle
												
			//"DateYearMonth", dtDateYearMonth
			//"Year", YearDate,
			//"Month Number", MonthNumber,
			//"Month", MonthName,
			//"Year Month Number", YearMonthNumber,
			//"Year Month", YearMonthName
			)
		)



//5 GENERATE function
EVALUATE
VAR BaseCalendar = 
	CALENDARAUTO()
	//CALENDAR( DATE(2016,1,1), DATE(2018,12,31) )
RETURN
	GENERATE(
		BaseCalendar,
		//VAR	BaseDate = [Date]
		VAR	YearDate = YEAR(BaseDate)
		VAR	MonthNumber = MONTH(BaseDate)
		VAR	MonthName = FORMAT(BaseDate, "mmmm")
		VAR	YearMonthName = FORMAT(BaseDate, "mmm yy")
		VAR	YearMonthNumber = YearDate * 12 + MonthNumber - 1
		RETURN ROW (
			"Day", [Date],
			"Year", YearDate,
			"Month Number", MonthNumber,
			"Month", MonthName,
			"Year Month Number", YearMonthNumber,
			"Year Month", YearMonthName
			)
		)



--------------------------------------------------------------

	